import os
import sqlite3
import threading
import time
import asyncio
import re
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from openpyxl.chart import LineChart, Reference
from dotenv import load_dotenv
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ConversationHandler


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ADMIN_IDS = [int(id_str.strip()) for id_str in os.getenv("ADMIN_IDS", "").split(",") if id_str.strip()]

def is_admin(user_id):
    return user_id in ADMIN_IDS

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
# DB_NAME = "/app/data/egg_database.db"  # –î–ª—è Docker
DB_NAME = "egg_database.db"  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
BROADCAST_MESSAGE = 1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–∏—Å–µ–π –æ —è–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç–∏
    c.execute('''CREATE TABLE IF NOT EXISTS eggs
                (id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                date TEXT,
                count INTEGER,
                notes TEXT)''')

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS user_settings
                (user_id INTEGER PRIMARY KEY,
                reminders_enabled BOOLEAN DEFAULT 0,
                reminder_time TEXT DEFAULT '20:00',
                timezone TEXT DEFAULT '+03:00')''')

    conn.commit()
    conn.close()

def is_valid_date(date_str):
    try:
        datetime.strptime(date_str, "%Y-%m-%d")
        return True
    except ValueError:
        return False

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
def add_egg_record(user_id, date, count, notes=""):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("INSERT INTO eggs (user_id, date, count, notes) VALUES (?, ?, ?, ?)",
              (user_id, date, count, notes))
    record_id = c.lastrowid
    conn.commit()
    conn.close()
    return record_id

def get_record_by_id(record_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT * FROM eggs WHERE id=?", (record_id,))
    record = c.fetchone()
    conn.close()
    return record

def update_record(record_id, count=None, date=None, notes=None):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    updates = []
    params = []

    if count is not None:
        updates.append("count = ?")
        params.append(count)
    if date is not None:
        updates.append("date = ?")
        params.append(date)
    if notes is not None:
        updates.append("notes = ?")
        params.append(notes)

    if updates:
        query = f"UPDATE eggs SET {', '.join(updates)} WHERE id = ?"
        params.append(record_id)
        c.execute(query, params)
        conn.commit()
    conn.close()

async def edit_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        args = context.args

        if len(args) < 2:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit <ID –∑–∞–ø–∏—Å–∏> <–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> [–¥–∞—Ç–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]\n"
                "–ü—Ä–∏–º–µ—Ä: /edit 1 15 2023-12-20 –ù–æ–≤—ã–π –∫–æ—Ä–º"
            )
            return

        record_id = int(args[0])
        new_count = int(args[1])
        new_date = args[2] if len(args) > 2 and is_valid_date(args[2]) else None
        new_notes = " ".join(args[3:]) if len(args) > 3 else None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        record = get_record_by_id(record_id)
        if not record or record[1] != user_id:
            await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        update_record(record_id, new_count, new_date, new_notes)
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def delete_record(record_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("DELETE FROM eggs WHERE id=?", (record_id,))
    conn.commit()
    conn.close()

async def delete_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        args = context.args

        if not args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <ID –∑–∞–ø–∏—Å–∏>")
            return

        record_id = int(args[0])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        record = get_record_by_id(record_id)
        if not record or record[1] != user_id:
            await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        delete_record(record_id)
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats(user_id, days=7):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    start_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")

    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    query = '''SELECT id, date, count
               FROM eggs
               WHERE user_id = ? AND date >= ?
               ORDER BY date'''
    c.execute(query, (user_id, start_date))
    data = c.fetchall()
    conn.close()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –∏ —Å—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü
    stats = {}
    for record_id, date, count in data:
        if date in stats:
            stats[date]['total'] += count
            stats[date]['ids'].append(record_id)
        else:
            stats[date] = {'total': count, 'ids': [record_id]}

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    result = [(date, details['total'], details['ids']) for date, details in stats.items()]
    return result

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    days = int(context.args[0]) if context.args else 7
    data = get_stats(user_id, days)

    if not data:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    stats_text = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:\n"
    total = 0

    for date, count, ids in data:
        stats_text += f"üìÖ {date}: {count} —è–∏—Ü\n"
        stats_text += f"   ID –∑–∞–ø–∏—Å–µ–π: {', '.join(map(str, ids))}\n"
        total += count

    stats_text += f"\n–í—Å–µ–≥–æ: {total} —è–∏—Ü\n–°—Ä–µ–¥–Ω–µ–µ: {total/len(data):.1f} —è–∏—Ü/–¥–µ–Ω—å"
    await update.message.reply_text(stats_text)

def has_today_entry(user_id):
    today = datetime.now().strftime("%Y-%m-%d")
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM eggs WHERE user_id = ? AND date = ?",
              (user_id, today))
    count = c.fetchone()[0]
    conn.close()
    return count > 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
def generate_plot(user_id, days=7):
    data = get_stats(user_id, days)
    if not data:
        return None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è
    dates = [datetime.strptime(row[0], "%Y-%m-%d") for row in data]
    counts = [row[1] for row in data]

    plt.figure(figsize=(10, 6))
    plt.plot(dates, counts, marker='o', linestyle='-', color='#ff6b6b')
    plt.title(f'–í–∞—à–∞ —è–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç—å –∑–∞ {days} –¥–Ω–µ–π')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü')
    plt.grid(True, alpha=0.3)
    plt.xticks(rotation=45)
    plt.tight_layout()

    filename = f"egg_stats_{user_id}_{days}days.png"
    plt.savefig(filename, dpi=100)
    plt.close()
    return filename

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
async def show_graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        days = int(context.args[0]) if context.args else 7
        if days <= 0:
            raise ValueError

        filename = generate_plot(user_id, days)
        if filename:
            await update.message.reply_photo(
                photo=open(filename, 'rb'),
                caption=f'üìà –ì—Ä–∞—Ñ–∏–∫ —è–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç–∏ –∑–∞ {days} –¥–Ω–µ–π'
            )
            os.remove(filename)
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")

    except (ValueError, IndexError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /graph <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
def calculate_analytics(user_id, days=7):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    data = get_stats(user_id, days * 2)

    if len(data) < 2:
        return None

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥—ã
    current = data[-days:]
    previous = data[:-days]

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    current_counts = [c[1] for c in current]
    avg_current = np.mean(current_counts)
    avg_previous = np.mean([p[1] for p in previous]) if previous else 0

    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (—Ç—Ä–µ–Ω–¥)
    slope, _, _, _, _ = stats.linregress(
        range(len(current_counts)), current_counts
    )

    # –ê–Ω–∞–ª–∏–∑ –∑–∞–º–µ—Ç–æ–∫
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''SELECT notes FROM eggs
                 WHERE user_id = ? AND date >= date('now', ?)''',
              (user_id, f'-{days} days',))
    notes = [note[0].lower() for note in c.fetchall() if note[0]]

    word_analysis = {}
    for note in notes:
        for word in note.split():
            word_analysis[word] = word_analysis.get(word, 0) + 1
    top_words = sorted(word_analysis.items(),
                      key=lambda x: x[1], reverse=True)[:3]

    conn.close()

    return {
        'current_avg': avg_current,
        'previous_avg': avg_previous,
        'trend': slope * days,  # –û–±—â–∏–π —Ç—Ä–µ–Ω–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥
        'max_day': max(current, key=lambda x: x[1]),
        'min_day': min(current, key=lambda x: x[1]),
        'top_words': top_words
    }

async def show_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        days = int(context.args[0]) if context.args else 7
        analytics = calculate_analytics(user_id, days)

        if not analytics:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        response = (
            f"üìà –í–∞—à–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:\n\n"
            f"‚ñ™ –°—Ä–µ–¥–Ω–µ–µ: {analytics['current_avg']:.1f} —è–∏—Ü/–¥–µ–Ω—å\n"
            f"‚ñ™ –¢—Ä–µ–Ω–¥: {'‚Üë' if analytics['trend'] > 0 else '‚Üì'} "
            f"{abs(analytics['trend']):.1f} —è–∏—Ü –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
            f"‚ñ™ –†–µ–∫–æ—Ä–¥: {analytics['max_day'][1]} —è–∏—Ü ({analytics['max_day'][0]})\n"
            f"‚ñ™ –ú–∏–Ω–∏–º—É–º: {analytics['min_day'][1]} —è–∏—Ü ({analytics['min_day'][0]})\n"
        )

        if analytics['previous_avg']:
            change = ((analytics['current_avg'] - analytics['previous_avg']) /
                     analytics['previous_avg'] * 100)
            response += (
                f"\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ—à–ª–æ–º—É –ø–µ—Ä–∏–æ–¥—É: "
                f"{change:+.1f}%\n"
            )

        if analytics['top_words']:
            response += "\nüîç –ß–∞—Å—Ç—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(
                [f"- {word} ({count} —Ä–∞–∑)" for word, count in analytics['top_words']]
            )

        await update.message.reply_text(response)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["/add", "/edit", "/delete"],
        ["/stats", "/graph", "/analytics"],
        ["/export", "/myid"],
        ["/help", "/reminders", "/donate ‚òï"],
    ]

    commands_text = (
        "üêî –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —è–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç–∏ –∫—É—Ä!\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚ñ™ /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
        "‚ñ™ /stats [–¥–Ω–∏] ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚ñ™ /graph [–¥–Ω–∏] ‚Äî –≥—Ä–∞—Ñ–∏–∫\n"
        "‚ñ™ /analytics [–¥–Ω–∏] ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏:\n"
        "‚ñ™ /edit <ID> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> [–¥–∞—Ç–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
        "‚ñ™ /delete <ID> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n\n"
        "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:\n"
        "‚ñ™ /export [–¥–Ω–∏] ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel\n\n"
        "‚ñ™ /help ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:\n"
        "‚ñ™ /reminders ‚Äî —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ üîî\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:\n"
        "‚ñ™ /donate ‚Äî –æ–ø–ª–∞—Ç–∏—Ç—å —á–∞—à–∫—É –∫–æ—Ñ–µ ‚òï\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é."
    )

    await update.message.reply_text(
        commands_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def add_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü> [–¥–∞—Ç–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "12 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å 12 —è–∏—Ü –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "12 2023-12-15 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å 12 —è–∏—Ü –Ω–∞ 15 –¥–µ–∫–∞–±—Ä—è 2023\n"
        "12 —Å–µ–≥–æ–¥–Ω—è –ö–æ—Ä–º –ø–æ–º–µ–Ω—è–ª–∏ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å 12 —è–∏—Ü –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        help_text = (
            "üêî –ë–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —è–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç–∏ –∫—É—Ä!\n\n"
            "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
            "‚ñ™ /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
            "‚ñ™ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚ñ™ /graph ‚Äî –≥—Ä–∞—Ñ–∏–∫\n"
            "‚ñ™ /analytics ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚ñ™ /edit ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
            "‚ñ™ /delete ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
            "‚ñ™ /export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç\n"
            "‚ñ™ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚ñ™ /donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞\n"
            "‚ñ™ /myid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
            "‚ñ™ /reminders ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n\n"
            
            "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ —Å–º–æ—Ç—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ '/help <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã>'"
        )
    else:
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        command = args[0].lower()
        if command == "add":
            help_text = (
                "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü> [–¥–∞—Ç–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "12 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å 12 —è–∏—Ü –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                "12 2023-12-15 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å 12 —è–∏—Ü –Ω–∞ 15 –¥–µ–∫–∞–±—Ä—è 2023\n"
                "12 —Å–µ–≥–æ–¥–Ω—è –ö–æ—Ä–º –ø–æ–º–µ–Ω—è–ª–∏ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å 12 —è–∏—Ü –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º"
            )
        elif command == "stats":
            help_text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats [–¥–Ω–∏], —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π\n"
                "/stats 14 ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 14 –¥–Ω–µ–π"
            )
        elif command == "graph":
            help_text = (
                "üìà –ì—Ä–∞—Ñ–∏–∫:\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /graph [–¥–Ω–∏], —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —è–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç–∏.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/graph ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∑–∞ 7 –¥–Ω–µ–π\n"
                "/graph 30 ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∑–∞ 30 –¥–Ω–µ–π"
            )
        elif command == "analytics":
            help_text = (
                "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /analytics [–¥–Ω–∏], —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/analytics ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π\n"
                "/analytics 14 ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ 14 –¥–Ω–µ–π"
            )
        elif command == "edit":
            help_text = (
                "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit <ID> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> [–¥–∞—Ç–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π], —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/edit 1 15 ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü –Ω–∞ 15 –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å ID 1\n"
                "/edit 1 15 2023-12-20 –ù–æ–≤—ã–π –∫–æ—Ä–º ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å —Å ID 1"
            )
        elif command == "delete":
            help_text = (
                "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete <ID>, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/delete 1 ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å ID 1"
            )
        elif command == "export":
            help_text = (
                "‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel:\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /export [–¥–Ω–∏], —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/export 5 ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª Excel —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞ 5 –¥–Ω–µ–π\n"
                "/export 2025-01-23 2025-02-06 ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª Excel —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
            )
        elif command == "reminders":
            help_text = (
                "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reminders –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —è–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç–∏.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/reminders on ‚Äî –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                "/reminders off ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                "/reminders time –ß–ß:–ú–ú ‚Äî –∑–∞–¥–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /reminders time 19:00)\n"
                "/reminders ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
            )
        else:
            help_text = f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{command}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."

    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    if context.user_data.get('awaiting_broadcast'):
        return
    
    try:
        user_id = update.message.from_user.id
        text = update.message.text

         # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        admin_commands = ["üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞"]
        if text in admin_commands:
            return
        
        if text.startswith('/'):
            return

        parts = text.split(maxsplit=2)
        count = int(parts[0])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
        if len(parts) > 1 and parts[1].lower() != "—Å–µ–≥–æ–¥–Ω—è":
            if not is_valid_date(parts[1]):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
                return
            date = parts[1]
            notes = parts[2] if len(parts) > 2 else ""
        else:
            date = datetime.now().strftime("%Y-%m-%d")
            notes = parts[2] if len(parts) > 2 else ""

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        record_id = add_egg_record(user_id, date, count, notes)
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {count} —è–∏—Ü\n"
            f"–î–∞—Ç–∞: {date}\n"
            f"–ó–∞–º–µ—Ç–∫–∞: {notes}\n"
            f"ID –∑–∞–ø–∏—Å–∏: {record_id}"
        )

    except Exception as e:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞! –ü—Ä–∏–º–µ—Ä—ã:\n"
            "12 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å 12 —è–∏—Ü –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "12 2023-12-15 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å 12 —è–∏—Ü –Ω–∞ 15 –¥–µ–∫–∞–±—Ä—è 2023\n"
            "12 —Å–µ–≥–æ–¥–Ω—è –ö–æ—Ä–º –ø–æ–º–µ–Ω—è–ª–∏ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å 12 —è–∏—Ü –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º"
        )

# –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel
def export_to_excel(user_id, start_date=None, end_date=None):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()

    query = '''SELECT date, SUM(count), GROUP_CONCAT(id)
               FROM eggs
               WHERE user_id = ?
               AND date >= ?
               AND date <= ?
               GROUP BY date
               ORDER BY date'''
    start_date = start_date or (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
    end_date = end_date or datetime.now().strftime("%Y-%m-%d")

    c.execute(query, (user_id, start_date, end_date))
    data = c.fetchall()
    conn.close()

    if not data:
        return None

    # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª
    wb = Workbook()
    ws = wb.active
    ws.title = "–Ø–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç—å"
    ws.append(["–î–∞—Ç–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü", "ID –∑–∞–ø–∏—Å–µ–π"])

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    for col in range(1, 4):
        cell = ws.cell(row=1, column=col)
        cell.font = Font(bold=True)
        cell.alignment = Alignment(horizontal="center")
        cell.border = Border(
            left=Side(style="thin"),
            right=Side(style="thin"),
            top=Side(style="thin"),
            bottom=Side(style="thin")
        )

   # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for date, count, ids in data:
        ws.append([date, count, ", ".join(map(str, ids))])

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º ID –∑–∞–ø–∏—Å–µ–π –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
    right_alignment = Alignment(horizontal="right")
    for row in ws.iter_rows(min_row=2, min_col=3, max_col=3):
        for cell in row:
            cell.alignment = right_alignment

    # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    for col in ws.columns:
        max_length = max(len(str(cell.value)) for cell in col)
        adjusted_width = (max_length + 2) * 1.2
        ws.column_dimensions[get_column_letter(col[0].column)].width = adjusted_width

    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    chart = LineChart()
    chart.title = "–Ø–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç—å"
    chart.x_axis.title = "–î–∞—Ç–∞"
    chart.y_axis.title = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü"

    data_ref = Reference(ws, min_col=2, min_row=1, max_row=len(data) + 1)
    categories_ref = Reference(ws, min_col=1, min_row=2, max_row=len(data) + 1)
    chart.add_data(data_ref, titles_from_data=True)
    chart.set_categories(categories_ref)

    ws.add_chart(chart, "E2")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    filename = f"egg_stats_{user_id}_{start_date}_to_{end_date}.xlsx"
    wb.save(filename)
    return filename

async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        args = context.args

        if len(args) == 2:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
            start_date, end_date = args
            if not (is_valid_date(start_date) and is_valid_date(end_date)):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
                return
        else:
            start_date = None
            end_date = None

        # –í—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
        filename = export_to_excel(user_id, start_date, end_date)
        if filename:
            await update.message.reply_document(
                document=open(filename, 'rb'),
                caption="–ú–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–∞–±–ª–∏—Ü–µ–π"
            )
            os.remove(filename)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    donate_url = "https://pay.cloudtips.ru/p/dbed3f9a"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
    message = (
        "‚òï –ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –±–æ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É!\n\n"
        f"üëâ [–û–ø–ª–∞—Ç–∏—Ç—å —á–∞—à–∫—É –∫–æ—Ñ–µ]({donate_url})"
    )
    await update.message.reply_text(
        message,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

async def show_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: `{user_id}`", parse_mode="Markdown")

async def send_reminder_async(bot, user_id):
    try:
        await bot.send_message(
            chat_id=user_id,
            text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –°–µ–≥–æ–¥–Ω—è –≤—ã –µ—â–µ –Ω–µ –≤–Ω–æ—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —è–π—Ü–∞—Ö.\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ."
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

def send_reminder(user_id):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(send_reminder_async(Bot(token=TOKEN), user_id))
    loop.close()

# -------------
def check_and_remind():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT user_id, reminder_time, timezone FROM user_settings WHERE reminders_enabled=1")
    users = c.fetchall()
    
    for user_id, reminder_time, timezone in users:
        try:
            if has_today_entry(user_id):
                continue
                
            hour, minute = map(int, reminder_time.split(':'))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                tz_offset = int(timezone[:3])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "+03:00" –≤ 3
            except:
                tz_offset = 3  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
                
            now = datetime.utcnow() + timedelta(hours=tz_offset)
            
            if now.hour == hour and now.minute == minute:
                threading.Thread(target=send_reminder, args=(user_id,)).start()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}: {str(e)}")
    
    conn.close()

def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    scheduler = BackgroundScheduler()
    scheduler.add_job(check_and_remind, 'interval', minutes=1)
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
    try:
        while True:
            time.sleep(60)
    except KeyboardInterrupt:
        scheduler.shutdown()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
def get_user_settings(user_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT reminders_enabled, reminder_time, timezone FROM user_settings WHERE user_id=?", (user_id,))
    settings = c.fetchone()
    conn.close()
    return settings or (False, '20:00', '+03:00')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def update_user_settings(user_id, reminders_enabled=None, reminder_time=None, timezone=None):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    
    if not c.execute("SELECT 1 FROM user_settings WHERE user_id=?", (user_id,)).fetchone():
        c.execute("INSERT INTO user_settings (user_id) VALUES (?)", (user_id,))
    
    updates = []
    params = []
    
    if reminders_enabled is not None:
        updates.append("reminders_enabled = ?")
        params.append(reminders_enabled)
    if reminder_time is not None:
        updates.append("reminder_time = ?")
        params.append(reminder_time)
    if timezone is not None:
        updates.append("timezone = ?")
        params.append(timezone)
    
    if updates:
        query = f"UPDATE user_settings SET {', '.join(updates)} WHERE user_id = ?"
        params.append(user_id)
        c.execute(query, params)
    
    conn.commit()
    conn.close()

async def manage_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.from_user is None:
        return  # –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    
    user_id = update.message.from_user.id
    args = context.args
    reminders_enabled, reminder_time, timezone = get_user_settings(user_id)

    if not args:
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if reminders_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await update.message.reply_text(
            f"üîî –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è: {reminder_time} (–ø–æ –≤–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ UTC{timezone})\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/reminders - —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            "/reminders on - –≤–∫–ª—é—á–∏—Ç—å\n"
            "/reminders off - –≤—ã–∫–ª—é—á–∏—Ç—å\n"
            "/reminders time –ß–ß:–ú–ú - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è\n"
            "/reminders tz ¬±–ß–ß:–ú–ú - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/reminders time 19:00 - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 19:00\n"
            "/reminders tz +05:00 - —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+5"
        )
        return

    action = args[0].lower()
    if action == "on":
        update_user_settings(user_id, reminders_enabled=True)
        await update.message.reply_text("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
    elif action == "off":
        update_user_settings(user_id, reminders_enabled=False)
        await update.message.reply_text("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!")
    elif action == "time" and len(args) > 1:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            datetime.strptime(args[1], "%H:%M")
            update_user_settings(user_id, reminder_time=args[1])
            await update.message.reply_text(
                f"‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {args[1]} (UTC{timezone})"
            )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
    elif action == "tz" and len(args) > 1:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            tz = args[1]
            if not re.match(r'^[+-]\d{2}:\d{2}$', tz):
                raise ValueError
            update_user_settings(user_id, timezone=tz)
            await update.message.reply_text(
                f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ UTC{tz}\n"
                f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {reminder_time} –ø–æ –≤–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏"
            )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬±–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä +03:00 –∏–ª–∏ -05:00)")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_reply_keyboard():
    keyboard = [
        ['/add', '/edit', '/delete'],
        ['/stats', '/graph', '/analytics'],
        ['/export', '/myid', '/help'],
        ['/reminders', '/donate ‚òï']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
# ______________________________________________________________________________________________
# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_general_stats():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    
    c.execute("SELECT COUNT(DISTINCT user_id) FROM eggs")
    total_users = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*), SUM(count) FROM eggs")
    total_records, total_eggs = c.fetchone()
    
    c.execute("SELECT COUNT(DISTINCT user_id) FROM eggs WHERE date >= date('now', '-7 days')")
    active_users = c.fetchone()[0]
    
    conn.close()
    
    return {
        "total_users": total_users or 0,
        "total_records": total_records or 0,
        "total_eggs": total_eggs or 0,
        "active_users": active_users or 0
    }

# –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
async def show_general_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return
    
    stats = get_general_stats()
    response = (
        "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —è–∏—Ü: {stats['total_eggs']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (7 –¥–Ω–µ–π): {stats['active_users']}"
    )
    await update.message.reply_text(response)

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return
    
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT DISTINCT user_id, COUNT(*) as entries FROM eggs GROUP BY user_id ORDER BY entries DESC")
    users = c.fetchall()
    conn.close()
    
    if not users:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
        return
    
    response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for idx, (user_id, entries) in enumerate(users, 1):
        response += f"{idx}. ID: {user_id} - –ó–∞–ø–∏—Å–µ–π: {entries}\n"
    
    await update.message.reply_text(response)

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_admin(user_id):
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    return BROADCAST_MESSAGE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT DISTINCT user_id FROM eggs")
    user_ids = [row[0] for row in c.fetchall()]
    conn.close()
    
    success = 0
    failed = 0
    
    for uid in user_ids:
        try:
            await context.bot.send_message(
                chat_id=uid,
                text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message}"
            )
            success += 1
        except Exception:
            failed += 1
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
async def handle_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_admin(user_id) or context.user_data.get('awaiting_broadcast') != True:
        return
    
    message = update.message.text
    context.user_data.pop('awaiting_broadcast', None)  # –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Ñ–ª–∞–≥
    
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT DISTINCT user_id FROM eggs")
    user_ids = [row[0] for row in c.fetchall()]
    conn.close()
    
    success = 0
    failed = 0
    
    for uid in user_ids:
        try:
            await context.bot.send_message(
                chat_id=uid,
                text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message}"
            )
            success += 1
        except Exception:
            failed += 1
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    keyboard = [
        ["üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
        ["üì¢ –†–∞—Å—Å—ã–ª–∫–∞"]
    ]
    await update.message.reply_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )

async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop('awaiting_broadcast', None)
    await update.message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    init_db()
    scheduler_thread = threading.Thread(target=start_scheduler, daemon=True)
    scheduler_thread.start()
    
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Text(["üì¢ –†–∞—Å—Å—ã–ª–∫–∞"]) & filters.ChatType.PRIVATE, broadcast_message)
        ],
        states={
            BROADCAST_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_broadcast_message)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_broadcast)],  # –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END
        }
    )
    
    application.add_handler(conv_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –í–´–®–ï –æ–±—ã—á–Ω—ã—Ö
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(MessageHandler(
        filters.Text(["üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]) & filters.ChatType.PRIVATE, 
        show_general_stats
    ))
    application.add_handler(MessageHandler(
        filters.Text(["üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]) & filters.ChatType.PRIVATE, 
        list_users
    ))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_entry))
    application.add_handler(CommandHandler("edit", edit_entry))
    application.add_handler(CommandHandler("delete", delete_entry))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("graph", show_graph))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("analytics", show_analytics))
    application.add_handler(CommandHandler("export", export_data))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("donate", donate))
    application.add_handler(CommandHandler("myid", show_my_id))
    application.add_handler(CommandHandler("reminders", manage_reminders))
    
    # –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == "__main__":
    main()