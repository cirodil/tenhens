import streamlit as st
import sqlite3
import hashlib
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "DB_PATH"

def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS eggs
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  date TEXT,
                  count INTEGER,
                  notes TEXT)''')
                  
    c.execute('''CREATE TABLE IF NOT EXISTS streamlit_users
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  username TEXT UNIQUE,
                  telegram_id INTEGER UNIQUE,
                  password TEXT,
                  security_question TEXT,
                  security_answer TEXT)''')
    conn.commit()
    conn.close()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def register_user(username, telegram_id, password, security_question, security_answer):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    hashed_password = hash_password(password)
    hashed_answer = hash_password(security_answer.lower().strip())
    c.execute("""INSERT INTO streamlit_users 
                 (username, telegram_id, password, security_question, security_answer) 
                 VALUES (?, ?, ?, ?, ?)""",
              (username, telegram_id, hashed_password, security_question, hashed_answer))
    conn.commit()
    conn.close()

def authenticate_user(username, password):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT password, telegram_id FROM streamlit_users WHERE username = ?", (username,))
    result = c.fetchone()
    conn.close()
    if result and hash_password(password) == result[0]:
        st.session_state['telegram_id'] = result[1]
        return True
    return False

def reset_password(username, new_password):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    hashed_password = hash_password(new_password)
    c.execute("UPDATE streamlit_users SET password = ? WHERE username = ?",
              (hashed_password, username))
    conn.commit()
    conn.close()

def verify_security_answer(username, answer):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT security_question, security_answer FROM streamlit_users WHERE username = ?", (username,))
    result = c.fetchone()
    conn.close()
    if result and hash_password(answer.lower().strip()) == result[1]:
        return result[0]
    return None

def get_user_data(telegram_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT id, date, count, notes FROM eggs WHERE user_id = ? ORDER BY date DESC", (telegram_id,))
    data = c.fetchall()
    conn.close()
    return data

def add_egg_record(user_id, date, count, notes=""):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("INSERT INTO eggs (user_id, date, count, notes) VALUES (?, ?, ?, ?)",
              (user_id, date, count, notes))
    conn.commit()
    conn.close()

def delete_record(record_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("DELETE FROM eggs WHERE id=?", (record_id,))
    conn.commit()
    conn.close()

def update_record(record_id, count=None, date=None, notes=None):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    updates = []
    params = []
    if count is not None:
        updates.append("count = ?")
        params.append(count)
    if date is not None:
        updates.append("date = ?")
        params.append(date)
    if notes is not None:
        updates.append("notes = ?")
        params.append(notes)
    if updates:
        query = f"UPDATE eggs SET {', '.join(updates)} WHERE id = ?"
        params.append(record_id)
        c.execute(query, params)
        conn.commit()
    conn.close()

def get_stats(user_id, days=7):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    start_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")
    c.execute('''SELECT date, SUM(count)
                 FROM eggs
                 WHERE user_id = ? AND date >= ?
                 GROUP BY date
                 ORDER BY date''', (user_id, start_date))
    data = c.fetchall()
    conn.close()
    return data

def generate_plot(user_id, days=7):
    data = get_stats(user_id, days)
    if not data:
        return None
    dates = [datetime.strptime(row[0], "%Y-%m-%d") for row in data]
    counts = [row[1] for row in data]
    plt.figure(figsize=(10, 6))
    plt.plot(dates, counts, marker='o', linestyle='-', color='#ff6b6b')
    plt.title(f'–Ø–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç—å –∑–∞ {days} –¥–Ω–µ–π')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü')
    plt.grid(True, alpha=0.3)
    plt.xticks(rotation=45)
    plt.tight_layout()
    filename = f"egg_stats_{user_id}_{days}days.png"
    plt.savefig(filename, dpi=100)
    plt.close()
    return filename

def calculate_analytics(user_id, days=7):
    data = get_stats(user_id, days * 2)
    if len(data) < 2:
        return None
    current = data[-days:]
    previous = data[:-days]
    current_counts = [c[1] for c in current]
    avg_current = np.mean(current_counts)
    avg_previous = np.mean([p[1] for p in previous]) if previous else 0
    slope, _, _, _, _ = stats.linregress(range(len(current_counts)), current_counts)
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''SELECT notes FROM eggs
                 WHERE user_id = ? AND date >= date('now', ?)''',
              (user_id, f'-{days} days',))
    notes = [note[0].lower() for note in c.fetchall() if note[0]]
    word_analysis = {}
    for note in notes:
        for word in note.split():
            word_analysis[word] = word_analysis.get(word, 0) + 1
    top_words = sorted(word_analysis.items(), key=lambda x: x[1], reverse=True)[:3]
    conn.close()
    return {
        'current_avg': avg_current,
        'previous_avg': avg_previous,
        'trend': slope * days,
        'max_day': max(current, key=lambda x: x[1]),
        'min_day': min(current, key=lambda x: x[1]),
        'top_words': top_words
    }

init_db()

st.title("üêî –£—á–µ—Ç —è–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç–∏ –∫—É—Ä")

if not st.session_state.get('logged_in'):
    auth_container = st.container()
    with auth_container:
        menu = st.sidebar.selectbox("–ú–µ–Ω—é", ["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?"])
        
        if menu == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç")
            new_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            new_telegram_id = st.number_input("Telegram ID", min_value=1, step=1)
            st.link_button("üÜî –ü–æ–ª—É—á–∏—Ç—å Telgram ID", "https://t.me/testhens_bot", help="–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å Telegram ID –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /myid", type="secondary")
            new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            security_question = st.text_input("–°–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–µ–≤–∏—á—å—è —Ñ–∞–º–∏–ª–∏—è –º–∞—Ç–µ—Ä–∏?)")
            security_answer = st.text_input("–û—Ç–≤–µ—Ç –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
            
            if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
                if all([new_username, new_telegram_id, new_password, security_question, security_answer]):
                    register_user(new_username, new_telegram_id, new_password, 
                                security_question, security_answer)
                    st.success("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                else:
                    st.error("–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")

        elif menu == "–í—Ö–æ–¥":
            st.subheader("–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç")
            username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            if st.button("–í–æ–π—Ç–∏"):
                if authenticate_user(username, password):
                    st.session_state['logged_in'] = True
                    st.session_state['username'] = username
                    st.rerun()
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        elif menu == "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?":
            st.subheader("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è")
            username = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            if username:
                conn = sqlite3.connect(DB_NAME)
                c = conn.cursor()
                c.execute("SELECT security_question FROM streamlit_users WHERE username = ?", (username,))
                result = c.fetchone()
                conn.close()
                
                if result:
                    question = result[0]
                    answer = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: '{question}'")
                    new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
                    
                    if st.button("–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å"):
                        if verify_security_answer(username, answer):
                            reset_password(username, new_password)
                            st.success("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
                        else:
                            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
                else:
                    st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

else:
    st.sidebar.subheader(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {st.session_state['username']}!")
    action = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", 
        ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", 
         "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ì—Ä–∞—Ñ–∏–∫"])
    
    if action == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å":
        st.subheader("üì• –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")
        count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü", min_value=0, step=1)
        date = st.date_input("–î–∞—Ç–∞")
        notes = st.text_input("–ó–∞–º–µ—Ç–∫–∏")
        if st.button("–î–æ–±–∞–≤–∏—Ç—å"):
            add_egg_record(st.session_state['telegram_id'], date.strftime("%Y-%m-%d"), count, notes)
            st.success("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    elif action == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å":
        st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å")
        record_id = st.number_input("ID –∑–∞–ø–∏—Å–∏", min_value=1, step=1)
        count = st.number_input("–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü", min_value=0, step=1)
        date = st.date_input("–ù–æ–≤–∞—è –¥–∞—Ç–∞")
        notes = st.text_input("–ù–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏")
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å"):
            update_record(record_id, count, date.strftime("%Y-%m-%d"), notes)
            st.success("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

    elif action == "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å":
        st.subheader("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
        record_id = st.number_input("ID –∑–∞–ø–∏—Å–∏", min_value=1, step=1)
        if st.button("–£–¥–∞–ª–∏—Ç—å"):
            delete_record(record_id)
            st.success("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

    elif action == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        days = st.slider("–ü–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π)", min_value=1, max_value=365, value=7)
        data = get_stats(st.session_state['telegram_id'], days)
        if data:
            st.write(f"**–í—Å–µ–≥–æ —è–∏—Ü –∑–∞ {days} –¥–Ω–µ–π:** {sum(x[1] for x in data)}")
            st.dataframe(
                data=[{"–î–∞—Ç–∞": date, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": count} for date, count in data],
                use_container_width=True,
                column_config={
                    "–î–∞—Ç–∞": st.column_config.DateColumn(format="YYYY-MM-DD"),
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": st.column_config.NumberColumn(format="%d ü•ö")
                }
            )
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

    elif action == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        st.subheader("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        days = st.slider("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π)", min_value=7, max_value=90, value=30)
        analytics = calculate_analytics(st.session_state['telegram_id'], days)
        
        if analytics:
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å", f"{analytics['current_avg']:.1f} —è–∏—Ü",
                        delta=f"{analytics['trend']:+.1f} —Ç—Ä–µ–Ω–¥")
                st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω—å", 
                        f"{analytics['max_day'][1]} —è–∏—Ü",
                        help=f"–î–∞—Ç–∞: {analytics['max_day'][0]}")
                
            with col2:
                st.metric("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –ø–µ—Ä–∏–æ–¥–æ–º", 
                        f"{analytics['current_avg'] - analytics['previous_avg']:+.1f}",
                        help=f"–ü—Ä–µ–¥. –ø–µ—Ä–∏–æ–¥: {analytics['previous_avg']:.1f}")
                st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω—å", 
                        f"{analytics['min_day'][1]} —è–∏—Ü",
                        help=f"–î–∞—Ç–∞: {analytics['min_day'][0]}")
            
            if analytics['top_words']:
                st.subheader("üîç –ß–∞—Å—Ç—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–º–µ—Ç–∫–∞—Ö")
                cols = st.columns(3)
                for i, (word, count) in enumerate(analytics['top_words']):
                    cols[i].metric(f"–°–ª–æ–≤–æ #{i+1}", word, f"{count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")

        else:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    elif action == "–ì—Ä–∞—Ñ–∏–∫":
        st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ —è–π—Ü–µ–Ω–æ—Å–∫–æ—Å—Ç–∏")
        days = st.slider("–ü–µ—Ä–∏–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–Ω–µ–π)", min_value=7, max_value=180, value=30)
        filename = generate_plot(st.session_state['telegram_id'], days)
        if filename:
            st.image(filename)
            with open(filename, "rb") as file:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫",
                    data=file,
                    file_name=f"egg_production_{days}_days.png",
                    mime="image/png"
                )
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")

    if st.sidebar.button("üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"):
        st.session_state.clear()
        st.rerun()